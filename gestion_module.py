# gestion_module.py - VERSI√ìN COMPACTA MEJORADA CON BOTONES SIEMPRE VISIBLES
import streamlit as st
import pandas as pd
from datetime import datetime
import io
import tempfile
import os

def gestion_section():
    """Secci√≥n completa de Gesti√≥n de Clientes - VERSI√ìN COMPLETA CORREGIDA"""
    
    # ‚úÖ INICIALIZACI√ìN COMPLETA DEL ESTADO (MOVIDA AL INICIO)
    if 'gestion_initialized' not in st.session_state:
        st.session_state.gestion_initialized = True
        st.session_state.cliente_seleccionado_gestion = None
        st.session_state.historial_gestiones = pd.DataFrame()
        st.session_state.filtro_actual_gestion = "Todos los clientes"
        st.session_state.texto_busqueda_gestion = ""
        st.session_state.datos_cliente_actual = {}
        st.session_state.todos_los_clientes = pd.DataFrame()  # ‚úÖ INICIALIZAR AQU√ç
        st.session_state.clientes_filtrados = pd.DataFrame()
        st.session_state.cartera_cliente_actual = pd.DataFrame()
        st.session_state.analisis_cartera = {}
        
        # Estado para exportaci√≥n/importaci√≥n
        st.session_state.mostrar_exportar = False
        st.session_state.mostrar_importar = False
    
    # ‚úÖ NUEVO: Verificar si hay cliente pre-seleccionado desde cartera
    if (st.session_state.get('cliente_para_gestion') and 
        not st.session_state.get('cliente_seleccionado_gestion')):
        
        nit_cliente = st.session_state.cliente_para_gestion
        
        # ‚úÖ CARGAR CLIENTES PRIMERO SI EST√ÅN VAC√çOS
        if st.session_state.todos_los_clientes.empty:
            with st.spinner("üîÑ Cargando base de clientes..."):
                st.session_state.todos_los_clientes = cargar_todos_los_clientes()
                st.session_state.clientes_filtrados = st.session_state.todos_los_clientes.copy()
        
        with st.spinner("üîÑ Cargando cliente seleccionado desde Cartera..."):
            success = seleccionar_cliente_desde_cartera(nit_cliente)
            if success:
                st.success(f"‚úÖ Cliente cargado autom√°ticamente en Gesti√≥n")
                # Limpiar la variable para evitar repeticiones
                st.session_state.cliente_para_gestion = None
            else:
                st.error("‚ùå No se pudo cargar el cliente en Gesti√≥n")
                st.session_state.cliente_para_gestion = None
    
    # Cargar todos los clientes si no est√°n cargados
    if st.session_state.todos_los_clientes.empty:
        with st.spinner("Cargando clientes..."):
            st.session_state.todos_los_clientes = cargar_todos_los_clientes()
            st.session_state.clientes_filtrados = st.session_state.todos_los_clientes.copy()
    
    # ‚úÖ BOTONES DE EXPORTACI√ìN/IMPORTACI√ìN SIEMPRE VISIBLES
    mostrar_botones_exportacion_importacion()
    
    # ‚úÖ B√öSQUEDA Y FILTROS SIEMPRE VISIBLES
    mostrar_busqueda_filtros()
    
    # ‚úÖ LISTA DE CLIENTES SIEMPRE VISIBLE
    mostrar_lista_clientes()
    
    # ‚úÖ INFORMACI√ìN DEL CLIENTE (solo si hay selecci√≥n)
    if st.session_state.cliente_seleccionado_gestion:
        mostrar_informacion_cliente()
        mostrar_formulario_gestion()
        mostrar_historial_gestiones()
    else:
        # Mostrar estad√≠sticas cuando no hay cliente seleccionado
        st.markdown("---")
        mostrar_estadisticas_generales_compactas()

def mostrar_botones_exportacion_importacion():
    """Muestra los botones de exportaci√≥n/importaci√≥n - SIEMPRE VISIBLES"""
    
    st.subheader("üì§ Exportar / Importar Gestiones")
    
    # Crear dos columnas para los botones
    col_export, col_import = st.columns(2)
    
    with col_export:
        if st.button("üì§ Exportar Gestiones", use_container_width=True, type="secondary"):
            st.session_state.mostrar_exportar = True
    
    with col_import:
        if st.button("üì• Importar Gestiones", use_container_width=True, type="secondary"):
            st.session_state.mostrar_importar = True
    
    # Mostrar di√°logo de exportaci√≥n si est√° activo
    if st.session_state.get('mostrar_exportar', False):
        mostrar_dialogo_exportacion()
    
    # Mostrar di√°logo de importaci√≥n si est√° activo
    if st.session_state.get('mostrar_importar', False):
        mostrar_dialogo_importacion()

def mostrar_busqueda_filtros():
    """Muestra b√∫squeda y filtros - SIEMPRE VISIBLE"""
    
    st.subheader("üîç B√∫squeda y Filtros")
    
    # B√öSQUEDA POR TEXTO - COMPACTA
    texto_busqueda = st.text_input(
        "Buscar cliente:",
        placeholder="NIT, Raz√≥n Social...",
        key="buscar_gestion_input",
        value=st.session_state.texto_busqueda_gestion
    )
    
    # ACTUALIZAR B√öSQUEDA SI CAMBIA
    if texto_busqueda != st.session_state.texto_busqueda_gestion:
        st.session_state.texto_busqueda_gestion = texto_busqueda
        aplicar_filtros()
        st.rerun()
    
    # FILTROS COMPACTOS
    filtro_tipo = st.selectbox(
        "Filtrar por estado:",
        options=[
            "Todos los clientes",
            "‚ö†Ô∏è Clientes en mora", 
            "‚úÖ Clientes con gesti√≥n este mes",
            "‚è≥ Clientes sin gesti√≥n este mes",
            "üìã Clientes con gesti√≥n (hist√≥rico)",
            "üì≠ Clientes sin gesti√≥n (hist√≥rico)"
        ],
        key="filtro_clientes_gestion"
    )
    
    # ACTUALIZAR FILTRO SI CAMBIA
    if filtro_tipo != st.session_state.filtro_actual_gestion:
        st.session_state.filtro_actual_gestion = filtro_tipo
        aplicar_filtros()
        st.rerun()
    
    # BOTONES COMPACTOS
    col_btn1, col_btn2 = st.columns(2)
    with col_btn1:
        if st.button("üîÑ Actualizar", use_container_width=True):
            aplicar_filtros()
            st.rerun()
    
    with col_btn2:
        if st.button("üßπ Limpiar", use_container_width=True):
            st.session_state.texto_busqueda_gestion = ""
            st.session_state.filtro_actual_gestion = "Todos los clientes"
            st.session_state.clientes_filtrados = st.session_state.todos_los_clientes.copy()
            st.rerun()
    
    # ESTAD√çSTICAS COMPACTAS
    st.info(f"üìä {len(st.session_state.clientes_filtrados)} de {len(st.session_state.todos_los_clientes)} clientes")

def mostrar_lista_clientes():
    """Muestra la lista de clientes - SIEMPRE VISIBLE"""
    
    st.subheader("üë• Lista de Clientes")
    
    if not st.session_state.clientes_filtrados.empty:
        # USAR UN SELECTBOX GIGANTE COMO LISTA
        clientes_options = []
        for index, cliente in st.session_state.clientes_filtrados.iterrows():
            display_text = f"{cliente['nit_cliente']} - {cliente['razon_social']}"
            clientes_options.append(display_text)
        
        # Agregar opci√≥n vac√≠a al principio
        clientes_options.insert(0, "--- Selecciona un cliente ---")
        
        cliente_seleccionado = st.selectbox(
            "Clientes:",
            options=clientes_options,
            key="lista_clientes_select",
            label_visibility="collapsed"
        )
        
        # Detectar cuando se selecciona un cliente
        if cliente_seleccionado and cliente_seleccionado != "--- Selecciona un cliente ---":
            # Extraer NIT del texto seleccionado
            nit_seleccionado = cliente_seleccionado.split(" - ")[0]
            
            # Buscar el cliente correspondiente
            cliente_encontrado = st.session_state.clientes_filtrados[
                st.session_state.clientes_filtrados['nit_cliente'] == nit_seleccionado
            ]
            
            if not cliente_encontrado.empty:
                seleccionar_cliente(cliente_encontrado.iloc[0])
                st.rerun()
        
    else:
        st.warning("No se encontraron clientes con los filtros aplicados")

def mostrar_informacion_cliente():
    """Muestra informaci√≥n del cliente seleccionado"""
    
    cliente = st.session_state.cliente_seleccionado_gestion
    analisis = st.session_state.analisis_cartera
    
    st.markdown("---")
    st.subheader(f"üë§ {cliente['razon_social']}")
    
    # BOT√ìN PARA VOLVER
    if st.button("‚Üê Volver a lista", type="secondary", use_container_width=True):
        st.session_state.cliente_seleccionado_gestion = None
        st.rerun()
    
    # Tarjetas de informaci√≥n b√°sica compactas
    col1, col2 = st.columns(2)
    
    with col1:
        st.text_input("NIT", cliente.get('nit_cliente', 'N/A'), key="nit_display", disabled=True)
        st.text_input("Tel√©fono", cliente.get('telefono', 'No disponible') or 'No disponible', key="tel_display", disabled=True)
    
    with col2:
        st.text_input("Email", cliente.get('email', 'No disponible') or 'No disponible', key="email_display", disabled=True)
        st.text_input("Ciudad", cliente.get('ciudad', 'No disponible') or 'No disponible', key="ciudad_display", disabled=True)
    
    st.text_input("Vendedor", cliente.get('vendedor_asignado', 'No asignado') or 'No asignado', key="vendedor_display", disabled=True)
    
    st.markdown("---")
    
    # AN√ÅLISIS COMPACTO DE CARTERA
    st.subheader("üí∞ An√°lisis de Cartera")
    
    # M√©tricas principales de cartera - Compactas
    col1, col2, col3, col4 = st.columns(4)
    
    with col1:
        st.metric(
            "Total Cartera", 
            f"${analisis['total_cartera']:,.0f}",
            help="Valor total de todas las facturas"
        )
    
    with col2:
        st.metric(
            "Cartera Corriente", 
            f"${analisis['cartera_corriente']:,.0f}",
            delta=f"{analisis['num_facturas_corriente']} facturas",
            delta_color="normal",
            help="Facturas al d√≠a"
        )
    
    with col3:
        st.metric(
            "Cartera en Mora", 
            f"${analisis['cartera_mora']:,.0f}",
            delta=f"{analisis['num_facturas_vencidas']} facturas",
            delta_color="inverse",
            help="Facturas vencidas"
        )
    
    with col4:
        st.metric(
            "D√≠as Mora M√°x", 
            f"{int(analisis['dias_mora_max'])} d√≠as",
            help="M√°ximo d√≠as de mora"
        )
    
    # DETALLE DE FACTURAS COMPACTO
    st.subheader("üìÑ Detalle de Facturas")
    
    # Pesta√±as para facturas corrientes y vencidas
    tab1, tab2 = st.tabs(["‚úÖ Facturas Corrientes", "‚ö†Ô∏è Facturas Vencidas"])
    
    with tab1:
        if not analisis['facturas_corriente'].empty:
            st.dataframe(
                mostrar_facturas_formateadas(analisis['facturas_corriente']),
                use_container_width=True,
                height=200
            )
            st.caption(f"üìä {len(analisis['facturas_corriente'])} facturas corrientes")
        else:
            st.info("No hay facturas corrientes")
    
    with tab2:
        if not analisis['facturas_vencidas'].empty:
            st.dataframe(
                mostrar_facturas_formateadas(analisis['facturas_vencidas']),
                use_container_width=True,
                height=200
            )
            st.caption(f"üìä {len(analisis['facturas_vencidas'])} facturas vencidas")
        else:
            st.info("No hay facturas vencidas")

def mostrar_formulario_gestion():
    """Muestra el formulario para registrar nueva gesti√≥n"""
    
    st.markdown("---")
    st.subheader("‚ûï Registrar Nueva Gesti√≥n")
    
    with st.form("formulario_gestion_compacto", clear_on_submit=True):
        # Campos en columnas compactas
        col1, col2 = st.columns(2)
        
        with col1:
            tipo_contacto = st.selectbox(
                "Tipo de Contacto:",
                options=[
                    "Llamada telef√≥nica", "WhatsApp", "Correo electr√≥nico",
                    "Visita presencial", "Videollamada", "Mensaje de texto"
                ],
                key="tipo_contacto_gestion_compact"
            )
            
            fecha_contacto = st.date_input(
                "Fecha de Contacto:",
                value=datetime.now().date(),
                key="fecha_contacto_gestion_compact"
            )
        
        with col2:
            resultado = st.selectbox(
                "Resultado:",
                options=obtener_opciones_resultado(),
                key="resultado_gestion_compact"
            )
            
            proxima_gestion = st.date_input(
                "Pr√≥xima Gesti√≥n:",
                value=datetime.now().date() + pd.Timedelta(days=7),
                key="proxima_gestion_compact"
            )
        
        # Promesa de pago compacta
        col3, col4 = st.columns(2)
        
        with col3:
            promesa_fecha = st.date_input(
                "Promesa Pago - Fecha:",
                value=datetime.now().date() + pd.Timedelta(days=15),
                key="promesa_fecha_gestion_compact"
            )
        
        with col4:
            promesa_monto = st.number_input(
                "Promesa Pago - Monto:",
                min_value=0.0,
                value=0.0,
                step=1000.0,
                format="%.0f",
                key="promesa_monto_gestion_compact"
            )
        
        # Observaciones compacta
        observaciones = st.text_area(
            "Observaciones:",
            placeholder="Detalles de la gesti√≥n, acuerdos, comentarios...",
            height=80,
            key="observaciones_gestion_compact"
        )
        
        # Bot√≥n de guardar compacto
        guardar_gestion = st.form_submit_button(
            "üíæ Guardar Gesti√≥n",
            use_container_width=True,
            type="primary"
        )
        
        if guardar_gestion:
            success = guardar_nueva_gestion(
                tipo_contacto, resultado, fecha_contacto, observaciones,
                promesa_fecha, promesa_monto, proxima_gestion
            )
            
            if success:
                st.success("‚úÖ Gesti√≥n guardada correctamente")
                # Recargar historial
                cliente = st.session_state.cliente_seleccionado_gestion
                st.session_state.historial_gestiones = cargar_historial_gestiones_cliente(cliente['nit_cliente'])

def mostrar_historial_gestiones():
    """Muestra el historial de gestiones del cliente"""
    
    st.markdown("---")
    st.subheader("üìä Historial de Gestiones")
    
    if not st.session_state.historial_gestiones.empty:
        # Preparar datos para visualizaci√≥n compacta
        df_display = st.session_state.historial_gestiones.copy()
        
        # Formatear columnas
        if 'promesa_pago_monto' in df_display.columns:
            df_display['promesa_pago_monto'] = df_display['promesa_pago_monto'].apply(
                lambda x: f"${x:,.0f}" if pd.notna(x) and x > 0 else "N/A"
            )
        
        # Seleccionar y ordenar columnas para vista compacta
        columnas_mostrar = [
            'fecha_contacto', 'tipo_contacto', 'resultado', 'observaciones',
            'promesa_pago_fecha', 'promesa_pago_monto'
        ]
        
        columnas_existentes = [col for col in columnas_mostrar if col in df_display.columns]
        df_display = df_display[columnas_existentes]
        
        # Renombrar columnas
        mapeo_nombres = {
            'fecha_contacto': 'üìÖ Fecha',
            'tipo_contacto': 'üìû Tipo',
            'resultado': 'üéØ Resultado',
            'observaciones': 'üìù Observaciones',
            'promesa_pago_fecha': 'üí∞ Fecha Promesa',
            'promesa_pago_monto': 'üí∞ Monto Promesa'
        }
        
        df_display = df_display.rename(columns=mapeo_nombres)
        
        # Mostrar tabla compacta
        st.dataframe(
            df_display,
            use_container_width=True,
            height=300,
            hide_index=True
        )
        
        st.caption(f"üìã {len(df_display)} gestiones registradas")
        
    else:
        st.info("‚ÑπÔ∏è No hay gestiones registradas para este cliente")

# =============================================================================
# FUNCIONES DE EXPORTACI√ìN/IMPORTACI√ìN (las mismas que antes)
# =============================================================================

def mostrar_dialogo_exportacion():
    """Muestra el di√°logo de exportaci√≥n con opciones"""
    
    st.markdown("---")
    st.subheader("üìä Opciones de Exportaci√≥n")
    
    # Opciones de exportaci√≥n
    opciones = [
        "üìÖ Gestiones del mes actual",
        "üìä Todas las gestiones (hist√≥rico completo)"
    ]
    
    # Agregar opci√≥n de cliente actual si hay uno seleccionado
    if st.session_state.cliente_seleccionado_gestion:
        opciones.append("üë§ Gestiones del cliente actual (filtrado)")
    
    opcion_export = st.radio(
        "Selecciona qu√© gestiones exportar:",
        options=opciones,
        key="opcion_export_gestiones"
    )
    
    # Informaci√≥n adicional seg√∫n la opci√≥n
    if opcion_export == "üìÖ Gestiones del mes actual":
        st.info("‚ÑπÔ∏è Exportar√°s solo las gestiones registradas en el mes actual")
    elif opcion_export == "üìä Todas las gestiones (hist√≥rico completo)":
        st.warning("‚ö†Ô∏è El archivo puede ser grande. Exportar√°s TODAS las gestiones hist√≥ricas")
    elif opcion_export == "üë§ Gestiones del cliente actual (filtrado)":
        if st.session_state.cliente_seleccionado_gestion:
            cliente = st.session_state.cliente_seleccionado_gestion
            st.info(f"‚ÑπÔ∏è Exportar√°s solo las gestiones del cliente: {cliente['razon_social']}")
        else:
            st.error("‚ùå Debes seleccionar un cliente primero para usar esta opci√≥n")
            return
    
    # Nombre del archivo
    nombre_archivo = st.text_input(
        "Nombre del archivo:",
        value=f"gestiones_exportadas_{datetime.now().strftime('%Y%m%d_%H%M')}",
        help="Puedes personalizar el nombre del archivo Excel"
    )
    
    # Botones de acci√≥n
    col_confirmar, col_cancelar = st.columns(2)
    
    with col_confirmar:
        if st.button("‚úÖ Exportar a Excel", use_container_width=True, type="primary"):
            exportar_gestiones_excel(opcion_export, nombre_archivo)
    
    with col_cancelar:
        if st.button("‚ùå Cancelar", use_container_width=True):
            st.session_state.mostrar_exportar = False
            st.rerun()

def exportar_gestiones_excel(opcion_export, nombre_archivo):
    """Exporta las gestiones seg√∫n la opci√≥n seleccionada"""
    
    try:
        db = st.session_state.db
        
        # Obtener datos seg√∫n la opci√≥n
        if opcion_export == "üìÖ Gestiones del mes actual":
            gestiones_df = db.obtener_gestiones_mes_actual()
            mensaje_exito = "gestiones del mes actual"
            
        elif opcion_export == "üìä Todas las gestiones (hist√≥rico completo)":
            gestiones_df = db.obtener_todas_gestiones()
            mensaje_exito = "todas las gestiones hist√≥ricas"
            
        elif opcion_export == "üë§ Gestiones del cliente actual (filtrado)":
            if st.session_state.cliente_seleccionado_gestion:
                nit_cliente = st.session_state.cliente_seleccionado_gestion['nit_cliente']
                gestiones_df = db.obtener_gestiones_cliente(nit_cliente)
                mensaje_exito = f"gestiones del cliente {st.session_state.cliente_seleccionado_gestion['razon_social']}"
            else:
                st.error("‚ùå No hay cliente seleccionado")
                return
        
        if gestiones_df.empty:
            st.error("‚ùå No hay gestiones para exportar con los criterios seleccionados")
            return
        
        # Preparar DataFrame para exportaci√≥n
        df_export = preparar_dataframe_exportacion(gestiones_df)
        
        # Crear archivo Excel en memoria
        output = io.BytesIO()
        with pd.ExcelWriter(output, engine='openpyxl') as writer:
            df_export.to_excel(writer, sheet_name='Gestiones', index=False)
            
            # Agregar hoja de metadatos
            metadata = pd.DataFrame({
                'Campo': ['Fecha exportaci√≥n', 'Total registros', 'Opci√≥n exportaci√≥n', 'Usuario'],
                'Valor': [
                    datetime.now().strftime('%Y-%m-%d %H:%M:%S'),
                    len(df_export),
                    opcion_export,
                    st.session_state.user['email']
                ]
            })
            metadata.to_excel(writer, sheet_name='Metadatos', index=False)
        
        output.seek(0)
        
        # Bot√≥n de descarga
        st.success(f"‚úÖ Se prepararon {len(df_export)} gestiones para exportar")
        
        st.download_button(
            label="‚¨áÔ∏è Descargar Archivo Excel",
            data=output.getvalue(),
            file_name=f"{nombre_archivo}.xlsx",
            mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet",
            use_container_width=True
        )
        
        # Bot√≥n para cerrar el di√°logo
        if st.button("üóô Cerrar di√°logo de exportaci√≥n", use_container_width=True):
            st.session_state.mostrar_exportar = False
            st.rerun()
            
    except Exception as e:
        st.error(f"‚ùå Error al exportar gestiones: {str(e)}")

def preparar_dataframe_exportacion(gestiones_df):
    """Prepara el DataFrame para exportaci√≥n con formato amigable"""
    
    if gestiones_df.empty:
        return pd.DataFrame()
    
    df_export = gestiones_df.copy()
    
    # Seleccionar y ordenar columnas importantes
    columnas_export = [
        'nit_cliente', 'razon_social_cliente', 'fecha_contacto', 'tipo_contacto',
        'resultado', 'observaciones', 'promesa_pago_fecha', 'promesa_pago_monto',
        'proxima_gestion', 'usuario'
    ]
    
    # Filtrar solo las columnas que existen
    columnas_existentes = [col for col in columnas_export if col in df_export.columns]
    df_export = df_export[columnas_existentes]
    
    # Renombrar columnas para mejor legibilidad
    mapeo_nombres = {
        'nit_cliente': 'NIT Cliente',
        'razon_social_cliente': 'Raz√≥n Social', 
        'fecha_contacto': 'Fecha Contacto',
        'tipo_contacto': 'Tipo Contacto',
        'resultado': 'Resultado',
        'observaciones': 'Observaciones',
        'promesa_pago_fecha': 'Promesa Pago Fecha',
        'promesa_pago_monto': 'Promesa Pago Monto',
        'proxima_gestion': 'Pr√≥xima Gesti√≥n',
        'usuario': 'Usuario'
    }
    
    df_export = df_export.rename(columns=mapeo_nombres)
    
    # Formatear montos
    if 'Promesa Pago Monto' in df_export.columns:
        df_export['Promesa Pago Monto'] = df_export['Promesa Pago Monto'].apply(
            lambda x: f"${x:,.0f}" if pd.notna(x) and x > 0 else "N/A"
        )
    
    return df_export

def mostrar_dialogo_importacion():
    """Muestra el di√°logo de importaci√≥n de gestiones"""
    
    st.markdown("---")
    st.subheader("üì• Importar Gestiones desde Excel")
    
    st.info("""
    **üìã Formato requerido para importar:**
    - El archivo debe ser Excel (.xlsx)
    - Debe contener las columnas: NIT Cliente, Raz√≥n Social, Fecha Contacto, Tipo Contacto, Resultado
    - Las fechas deben estar en formato YYYY-MM-DD
    - El NIT Cliente debe existir en la base de datos
    """)
    
    # Subir archivo
    archivo_subido = st.file_uploader(
        "Selecciona archivo Excel de gestiones",
        type=['xlsx'],
        key="upload_gestiones_excel"
    )
    
    if archivo_subido is not None:
        # Mostrar informaci√≥n del archivo
        file_details = {
            "Nombre": archivo_subido.name,
            "Tipo": archivo_subido.type,
            "Tama√±o": f"{archivo_subido.size / 1024 / 1024:.2f} MB"
        }
        st.write("**Archivo seleccionado:**")
        st.json(file_details)
        
        # Vista previa del archivo
        try:
            df_preview = pd.read_excel(archivo_subido, nrows=5)
            st.write("**Vista previa (primeras 5 filas):**")
            st.dataframe(df_preview, use_container_width=True)
            
            # Verificar columnas requeridas
            columnas_requeridas = ['NIT Cliente', 'Raz√≥n Social', 'Fecha Contacto', 'Tipo Contacto', 'Resultado']
            columnas_faltantes = [col for col in columnas_requeridas if col not in df_preview.columns]
            
            if columnas_faltantes:
                st.error(f"‚ùå Columnas requeridas faltantes: {', '.join(columnas_faltantes)}")
            else:
                st.success("‚úÖ El archivo tiene el formato correcto")
                
                # Bot√≥n de importaci√≥n
                if st.button("üöÄ Iniciar Importaci√≥n", type="primary", use_container_width=True):
                    importar_gestiones_desde_archivo(archivo_subido)
                    
        except Exception as e:
            st.error(f"‚ùå Error al leer el archivo: {str(e)}")
    
    # Bot√≥n de cancelar
    if st.button("‚ùå Cancelar Importaci√≥n", use_container_width=True):
        st.session_state.mostrar_importar = False
        st.rerun()

def importar_gestiones_desde_archivo(archivo_subido):
    """Importa gestiones desde un archivo Excel"""
    
    try:
        with st.spinner("üì• Importando gestiones..."):
            
            # Guardar archivo temporalmente
            with tempfile.NamedTemporaryFile(delete=False, suffix='.xlsx') as tmp_file:
                tmp_file.write(archivo_subido.getvalue())
                tmp_path = tmp_file.name
            
            # Importar usando DatabaseManager
            db = st.session_state.db
            success, message = db.importar_gestiones_excel(tmp_path)
            
            # Limpiar archivo temporal
            os.unlink(tmp_path)
            
            if success:
                st.success(f"‚úÖ {message}")
                
                # Actualizar historial si hay un cliente seleccionado
                if st.session_state.cliente_seleccionado_gestion:
                    nit_cliente = st.session_state.cliente_seleccionado_gestion['nit_cliente']
                    st.session_state.historial_gestiones = db.obtener_gestiones_cliente(nit_cliente)
                    st.rerun()
                
                # Cerrar di√°logo despu√©s de √©xito
                st.session_state.mostrar_importar = False
                
            else:
                st.error(f"‚ùå {message}")
                
    except Exception as e:
        st.error(f"‚ùå Error en la importaci√≥n: {str(e)}")

def cargar_todos_los_clientes():
    """Carga TODOS los clientes disponibles - VERSI√ìN ROBUSTA"""
    try:
        db = st.session_state.db
        clientes = db.obtener_clientes()
        
        if clientes.empty:
            st.warning("‚ö†Ô∏è No se encontraron clientes en la base de datos")
            return pd.DataFrame()
        
        print(f"‚úÖ Clientes cargados: {len(clientes)} registros")
        return clientes
        
    except Exception as e:
        st.error(f"‚ùå Error cargando clientes: {e}")
        return pd.DataFrame()

def aplicar_filtros():
    """Aplica todos los filtros a la lista de clientes"""
    try:
        # Empezar con todos los clientes
        clientes_filtrados = st.session_state.todos_los_clientes.copy()
        
        # Aplicar filtro de texto si existe
        if st.session_state.texto_busqueda_gestion and st.session_state.texto_busqueda_gestion.strip():
            texto = st.session_state.texto_busqueda_gestion.lower().strip()
            clientes_filtrados = clientes_filtrados[
                clientes_filtrados['nit_cliente'].astype(str).str.lower().str.contains(texto, na=False) |
                clientes_filtrados['razon_social'].astype(str).str.lower().str.contains(texto, na=False) |
                clientes_filtrados['ciudad'].astype(str).str.lower().str.contains(texto, na=False)
            ]
        
        # Aplicar filtro adicional por tipo
        filtro_tipo = st.session_state.filtro_actual_gestion
        
        if filtro_tipo == "‚ö†Ô∏è Clientes en mora":
            clientes_filtrados = filtrar_clientes_en_mora(clientes_filtrados)
        
        elif filtro_tipo == "‚úÖ Clientes con gesti√≥n este mes":
            clientes_filtrados = filtrar_clientes_con_gestion_mes(clientes_filtrados)
        
        elif filtro_tipo == "‚è≥ Clientes sin gesti√≥n este mes":
            clientes_filtrados = filtrar_clientes_sin_gestion_mes(clientes_filtrados)
        
        elif filtro_tipo == "üìã Clientes con gesti√≥n (hist√≥rico)":
            clientes_filtrados = filtrar_clientes_con_gestion_historico(clientes_filtrados)
        
        elif filtro_tipo == "üì≠ Clientes sin gesti√≥n (hist√≥rico)":
            clientes_filtrados = filtrar_clientes_sin_gestion_historico(clientes_filtrados)
        
        st.session_state.clientes_filtrados = clientes_filtrados
        
    except Exception as e:
        st.error(f"Error aplicando filtros: {e}")

def filtrar_clientes_en_mora(clientes):
    """Filtra clientes que tienen mora"""
    try:
        db = st.session_state.db
        cartera = db.obtener_cartera_actual()
        if not cartera.empty:
            clientes_mora = cartera[cartera['dias_vencidos'] > 0]['nit_cliente'].unique()
            return clientes[clientes['nit_cliente'].isin(clientes_mora)]
        return clientes
    except:
        return clientes

def filtrar_clientes_con_gestion_mes(clientes):
    """Filtra clientes con gesti√≥n este mes"""
    try:
        db = st.session_state.db
        gestiones_mes = db.obtener_gestiones_mes_actual()
        if not gestiones_mes.empty:
            clientes_con_gestion = gestiones_mes['nit_cliente'].unique()
            return clientes[clientes['nit_cliente'].isin(clientes_con_gestion)]
        return pd.DataFrame()
    except:
        return clientes

def filtrar_clientes_sin_gestion_mes(clientes):
    """Filtra clientes sin gesti√≥n este mes"""
    try:
        db = st.session_state.db
        gestiones_mes = db.obtener_gestiones_mes_actual()
        if not gestiones_mes.empty:
            clientes_con_gestion = gestiones_mes['nit_cliente'].unique()
            return clientes[~clientes['nit_cliente'].isin(clientes_con_gestion)]
        return clientes
    except:
        return clientes

def filtrar_clientes_con_gestion_historico(clientes):
    """Filtra clientes con gesti√≥n hist√≥rica"""
    try:
        db = st.session_state.db
        todas_gestiones = db.obtener_todas_gestiones()
        if not todas_gestiones.empty:
            clientes_con_gestion = todas_gestiones['nit_cliente'].unique()
            return clientes[clientes['nit_cliente'].isin(clientes_con_gestion)]
        return pd.DataFrame()
    except:
        return clientes

def filtrar_clientes_sin_gestion_historico(clientes):
    """Filtra clientes sin gesti√≥n hist√≥rica"""
    try:
        db = st.session_state.db
        todas_gestiones = db.obtener_todas_gestiones()
        if not todas_gestiones.empty:
            clientes_con_gestion = todas_gestiones['nit_cliente'].unique()
            return clientes[~clientes['nit_cliente'].isin(clientes_con_gestion)]
        return clientes
    except:
        return clientes

def seleccionar_cliente(cliente):
    """Selecciona un cliente y carga toda su informaci√≥n"""
    try:
        db = st.session_state.db
        
        # Guardar cliente seleccionado
        st.session_state.cliente_seleccionado_gestion = cliente.to_dict()
        st.session_state.datos_cliente_actual = cliente.to_dict()
        
        # Cargar cartera del cliente
        st.session_state.cartera_cliente_actual = db.obtener_cartera_actual()
        st.session_state.cartera_cliente_actual = st.session_state.cartera_cliente_actual[
            st.session_state.cartera_cliente_actual['nit_cliente'] == cliente['nit_cliente']
        ]
        
        # Calcular an√°lisis de cartera
        st.session_state.analisis_cartera = calcular_analisis_cartera(
            st.session_state.cartera_cliente_actual
        )
        
        # Cargar historial de gestiones
        st.session_state.historial_gestiones = db.obtener_gestiones_cliente(cliente['nit_cliente'])
        
        st.rerun()
        
    except Exception as e:
        st.error(f"Error cargando informaci√≥n del cliente: {e}")

def calcular_analisis_cartera(cartera_cliente):
    """Calcula el an√°lisis completo de la cartera del cliente"""
    if cartera_cliente.empty:
        return {
            'total_cartera': 0,
            'cartera_corriente': 0,
            'cartera_mora': 0,
            'dias_mora_max': 0,
            'num_facturas_total': 0,
            'num_facturas_corriente': 0,
            'num_facturas_vencidas': 0,
            'facturas_corriente': pd.DataFrame(),
            'facturas_vencidas': pd.DataFrame()
        }
    
    try:
        # Separar facturas corrientes y vencidas
        facturas_corriente = cartera_cliente[cartera_cliente['dias_vencidos'] == 0]
        facturas_vencidas = cartera_cliente[cartera_cliente['dias_vencidos'] > 0]
        
        return {
            'total_cartera': cartera_cliente['total_cop'].sum(),
            'cartera_corriente': facturas_corriente['total_cop'].sum(),
            'cartera_mora': facturas_vencidas['total_cop'].sum(),
            'dias_mora_max': facturas_vencidas['dias_vencidos'].max() if not facturas_vencidas.empty else 0,
            'num_facturas_total': len(cartera_cliente),
            'num_facturas_corriente': len(facturas_corriente),
            'num_facturas_vencidas': len(facturas_vencidas),
            'facturas_corriente': facturas_corriente,
            'facturas_vencidas': facturas_vencidas
        }
    except Exception as e:
        st.error(f"Error calculando an√°lisis de cartera: {e}")
        return {
            'total_cartera': 0,
            'cartera_corriente': 0,
            'cartera_mora': 0,
            'dias_mora_max': 0,
            'num_facturas_total': 0,
            'num_facturas_corriente': 0,
            'num_facturas_vencidas': 0,
            'facturas_corriente': pd.DataFrame(),
            'facturas_vencidas': pd.DataFrame()
        }

def mostrar_facturas_formateadas(facturas_df):
    """Formatea el DataFrame de facturas para mostrar"""
    if facturas_df.empty:
        return pd.DataFrame()
    
    df_display = facturas_df.copy()
    
    # Seleccionar columnas importantes
    columnas = ['nro_factura', 'total_cop', 'fecha_emision', 'fecha_vencimiento', 'dias_vencidos', 'condicion_pago']
    columnas_existentes = [col for col in columnas if col in df_display.columns]
    df_display = df_display[columnas_existentes]
    
    # Formatear valores
    if 'total_cop' in df_display.columns:
        df_display['total_cop'] = df_display['total_cop'].apply(lambda x: f"${x:,.0f}")
    
    if 'dias_vencidos' in df_display.columns:
        df_display['dias_vencidos'] = df_display['dias_vencidos'].astype(int)
    
    # Renombrar columnas
    mapeo = {
        'nro_factura': 'Factura',
        'total_cop': 'Valor',
        'fecha_emision': 'Emisi√≥n',
        'fecha_vencimiento': 'Vencimiento',
        'dias_vencidos': 'D√≠as Vencidos',
        'condicion_pago': 'Condici√≥n Pago'
    }
    
    df_display = df_display.rename(columns=mapeo)
    return df_display

def mostrar_estadisticas_generales_compactas():
    """Muestra estad√≠sticas generales compactas"""
    try:
        db = st.session_state.db
        
        col1, col2, col3, col4 = st.columns(4)
        
        with col1:
            total_clientes = len(st.session_state.todos_los_clientes)
            st.metric("Total Clientes", total_clientes)
        
        with col2:
            clientes_mora = len(filtrar_clientes_en_mora(st.session_state.todos_los_clientes))
            st.metric("Clientes en Mora", clientes_mora)
        
        with col3:
            clientes_gestion_mes = len(filtrar_clientes_con_gestion_mes(st.session_state.todos_los_clientes))
            st.metric("Gest. Este Mes", clientes_gestion_mes)
        
        with col4:
            gestiones_totales = len(db.obtener_todas_gestiones())
            st.metric("Total Gestiones", gestiones_totales)
            
    except Exception as e:
        st.error(f"Error cargando estad√≠sticas: {e}")

def obtener_opciones_resultado():
    """Retorna las opciones de resultado categorizadas"""
    return [
        "üí∞ COMPROMISO DE PAGO",
        "1. Promesa de Pago Total (Fecha/Monto)",
        "2. Promesa de Pago Parcial (Fecha/Monto)",
        "3. Acuerdo de Pago Formalizado (Cuotas)",
        "4. Pago Efectuado / Cobro Exitoso",
        "",
        "üìû CONTACTO Y LOCALIZACI√ìN",
        "5. Contacto Exitoso (Titular)",
        "6. Contacto con Tercero (Inform√≥/Transmiti√≥ mensaje)",
        "7. Dej√≥ Mensaje / Correo de Voz",
        "8. No Contesta / Ocupado",
        "9. N√∫mero Err√≥neo / Inexistente",
        "10. Email/Mensaje Enviado",
        "",
        "‚ö†Ô∏è DIFICULTAD Y RECHAZO",
        "11. Disputa / Reclamo de Facturaci√≥n",
        "12. Problema de Servicio (Pendiente de Resolver)",
        "13. Negativa de Pago (Dificultad temporal)",
        "14. Negativa de Pago (Rechazo definitivo)",
        "15. Quiebra / Insolvencia Confirmada",
        "16. Cliente Inactivo / Ilocalizable",
        "",
        "üîÑ SEGUIMIENTO Y ACCIONES INTERNAS",
        "17. Necesita Escalaci√≥n (A Legal/Supervisi√≥n)",
        "18. Enviar Documentaci√≥n Solicitada (Factura/Extracto)",
        "19. Agendar Nueva Llamada / Cita",
        "20. Datos Verificados / Actualizados",
        "21. Gesti√≥n No Finalizada (Reintentar pronto)"
    ]

def guardar_nueva_gestion(tipo_contacto, resultado, fecha_contacto, observaciones,
                         promesa_fecha, promesa_monto, proxima_gestion):
    """Guarda una nueva gesti√≥n en la base de datos"""
    
    try:
        cliente = st.session_state.cliente_seleccionado_gestion
        db = st.session_state.db
        
        # Validar campos obligatorios
        if not resultado or resultado.strip() == "" or resultado in [
            "üí∞ COMPROMISO DE PAGO", "üìû CONTACTO Y LOCALIZACI√ìN", 
            "‚ö†Ô∏è DIFICULTAD Y RECHAZO", "üîÑ SEGUIMIENTO Y ACCIONES INTERNAS", ""
        ]:
            st.error("‚ùå Por favor selecciona un resultado v√°lido")
            return False
        
        # Preparar datos
        gestion_data = (
            cliente['nit_cliente'],
            cliente['razon_social'],
            tipo_contacto,
            resultado,
            fecha_contacto.strftime('%Y-%m-%d'),
            "",  # usuario se llena autom√°ticamente en database.py
            observaciones,
            promesa_fecha.strftime('%Y-%m-%d') if promesa_fecha else None,
            float(promesa_monto) if promesa_monto and promesa_monto > 0 else None,
            proxima_gestion.strftime('%Y-%m-%d') if proxima_gestion else None
        )
        
        # Guardar en base de datos
        success = db.registrar_gestion(gestion_data)
        
        if success:
            # Actualizar historial
            st.session_state.historial_gestiones = db.obtener_gestiones_cliente(cliente['nit_cliente'])
            return True
        else:
            st.error("‚ùå Error al guardar la gesti√≥n")
            return False
            
    except Exception as e:
        st.error(f"‚ùå Error al guardar gesti√≥n: {str(e)}")
        return False

def cargar_historial_gestiones_cliente(nit_cliente):
    """Carga el historial de gestiones de un cliente espec√≠fico"""
    try:
        db = st.session_state.db
        return db.obtener_gestiones_cliente(nit_cliente)
    except Exception as e:
        st.error(f"Error cargando historial: {e}")
        return pd.DataFrame()
    
# =============================================================================
# FUNCIONES DE NAVEGACI√ìN DESDE CARTERA
# =============================================================================

def seleccionar_cliente_desde_cartera(nit_cliente):
    """Selecciona un cliente en el m√≥dulo de gesti√≥n desde cartera - VERSI√ìN CORREGIDA"""
    try:
        # ‚úÖ INICIALIZAR SI NO EXISTE
        if 'todos_los_clientes' not in st.session_state or st.session_state.todos_los_clientes.empty:
            st.session_state.todos_los_clientes = cargar_todos_los_clientes()
            st.session_state.clientes_filtrados = st.session_state.todos_los_clientes.copy()
        
        # Buscar el cliente por NIT
        cliente_encontrado = st.session_state.todos_los_clientes[
            st.session_state.todos_los_clientes['nit_cliente'] == nit_cliente
        ]
        
        if not cliente_encontrado.empty:
            # Seleccionar el cliente
            seleccionar_cliente(cliente_encontrado.iloc[0])
            return True
        else:
            st.error(f"‚ùå No se encontr√≥ el cliente con NIT: {nit_cliente}")
            return False
            
    except Exception as e:
        st.error(f"‚ùå Error seleccionando cliente: {e}")
        return False